from lsh import LSH256
from lsh import HmacLSH

key256 = [
    bytearray("key", "UTF-8"),
    [0] * 1024
]

key512 = [
    bytearray("key", "UTF-8"),
    [0] * 2048
]

exp256 = [
    [0x01, 0x28, 0xd9, 0xd5, 0xaf, 0xbc, 0x27, 0xd4, 0x03, 0x46, 0x9f, 0xcc, 0x02, 0xaf, 0xa5, 0xb5, 0xb0, 0xcc, 0x34, 0xc0, 0x20, 0x0a, 0xd6, 0xe8, 0x1e, 0xd9, 0x4c, 0x8d, 0x52, 0x41, 0x97, 0x83],
    [0xe0, 0x0e, 0x60, 0x56, 0x65, 0xaa, 0x03, 0x47, 0x19, 0x71, 0x10, 0xce, 0xb9, 0x85, 0x4a, 0x2d, 0x4b, 0x41, 0x27, 0x62, 0x07, 0xec, 0xaa, 0xfc, 0x67, 0xf6, 0x7c, 0xe5, 0x44, 0x32, 0x87, 0xa1],
]

exp512 = [
    [0x46, 0xff, 0x30, 0x2b, 0x45, 0xa4, 0xa7, 0xa4, 0x46, 0xa6, 0x5d, 0xe3, 0x4f, 0xb7, 0x7f, 0x41, 0x4c, 0xcb, 0x17, 0xdc, 0x3b, 0x6d, 0x86, 0xf6, 0x6a, 0x4e, 0xd0, 0xe2, 0xf6, 0x2a, 0xda, 0x4b, 0xb6, 0x17, 0x7f, 0xd7, 0xf7, 0x62, 0x4a, 0xeb, 0x2e, 0x38, 0x0d, 0x88, 0xf5, 0x82, 0x35, 0x5e, 0x56, 0x04, 0x94, 0x96, 0x60, 0x88, 0x23, 0x62, 0xd9, 0x59, 0x88, 0xeb, 0xc4, 0x48, 0xfe, 0x7f], 
    [0x2f, 0x6e, 0xa1, 0x08, 0xae, 0x2b, 0xc9, 0xc2, 0x73, 0xc8, 0xe3, 0xc2, 0x6c, 0x55, 0x67, 0x37, 0x2c, 0xd3, 0xbd, 0x79, 0xb7, 0x32, 0x2a, 0x54, 0x1c, 0x36, 0x60, 0x77, 0xed, 0x91, 0xf3, 0xc7, 0xc7, 0x40, 0xdc, 0xb3, 0x91, 0x62, 0xcb, 0x44, 0xbf, 0xae, 0x03, 0xd6, 0x32, 0x09, 0xda, 0x48, 0x6a, 0x6e, 0xef, 0x11, 0x1c, 0x3d, 0x03, 0x74, 0x96, 0xc3, 0xbc, 0x43, 0xbc, 0xb5, 0x13, 0xdd] 
]

def testvs(outbitlen, key, data, ref):
    hmac = HmacLSH(outbitlen)
    hmac.init(key)
    hmac.update(data)
    result = hmac.final()
    b1 = bytearray(ref)
    b2 = bytearray(result)
    if b1 != b2:
        print("HMAC-LSH%03dVS mismatch" %outbitlen)
        print("".join("%02x" % b for b in b1))
        print("".join("%02x" % b for b in b2))
        
msg = bytearray("A quick brown fox jumps over the lazy dog", "UTF-8")

for idx in range(2):
    testvs(256, key256[idx], msg, exp256[idx])
    
print("HMAC-LSH256VS test done!!")
    
for idx in range(2):
    testvs(512, key512[idx], msg, exp512[idx])    

print("HMAC-LSH512VS test done!!")
