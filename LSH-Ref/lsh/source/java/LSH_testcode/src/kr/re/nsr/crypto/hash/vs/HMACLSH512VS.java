package kr.re.nsr.crypto.hash.vs;

import java.util.Arrays;

import kr.re.nsr.crypto.Hash;
import kr.re.nsr.crypto.Mac;

public class HMACLSH512VS {

	//@formatter:off
	static final byte[][] key = {
		"key".getBytes(),
		new byte[2048],
	};

	static final byte[] data = "A quick brown fox jumps over the lazy dog".getBytes();

	static final byte[][] result = {
		{(byte) 0x46, (byte) 0xff, (byte) 0x30, (byte) 0x2b, (byte) 0x45, (byte) 0xa4, (byte) 0xa7, (byte) 0xa4, (byte) 0x46, (byte) 0xa6, (byte) 0x5d, (byte) 0xe3, (byte) 0x4f, (byte) 0xb7, (byte) 0x7f, (byte) 0x41, (byte) 0x4c, (byte) 0xcb, (byte) 0x17, (byte) 0xdc, (byte) 0x3b, (byte) 0x6d, (byte) 0x86, (byte) 0xf6, (byte) 0x6a, (byte) 0x4e, (byte) 0xd0, (byte) 0xe2, (byte) 0xf6, (byte) 0x2a, (byte) 0xda, (byte) 0x4b, (byte) 0xb6, (byte) 0x17, (byte) 0x7f, (byte) 0xd7, (byte) 0xf7, (byte) 0x62, (byte) 0x4a, (byte) 0xeb, (byte) 0x2e, (byte) 0x38, (byte) 0x0d, (byte) 0x88, (byte) 0xf5, (byte) 0x82, (byte) 0x35, (byte) 0x5e, (byte) 0x56, (byte) 0x04, (byte) 0x94, (byte) 0x96, (byte) 0x60, (byte) 0x88, (byte) 0x23, (byte) 0x62, (byte) 0xd9, (byte) 0x59, (byte) 0x88, (byte) 0xeb, (byte) 0xc4, (byte) 0x48, (byte) 0xfe, (byte) 0x7f}, 
		{(byte) 0x2f, (byte) 0x6e, (byte) 0xa1, (byte) 0x08, (byte) 0xae, (byte) 0x2b, (byte) 0xc9, (byte) 0xc2, (byte) 0x73, (byte) 0xc8, (byte) 0xe3, (byte) 0xc2, (byte) 0x6c, (byte) 0x55, (byte) 0x67, (byte) 0x37, (byte) 0x2c, (byte) 0xd3, (byte) 0xbd, (byte) 0x79, (byte) 0xb7, (byte) 0x32, (byte) 0x2a, (byte) 0x54, (byte) 0x1c, (byte) 0x36, (byte) 0x60, (byte) 0x77, (byte) 0xed, (byte) 0x91, (byte) 0xf3, (byte) 0xc7, (byte) 0xc7, (byte) 0x40, (byte) 0xdc, (byte) 0xb3, (byte) 0x91, (byte) 0x62, (byte) 0xcb, (byte) 0x44, (byte) 0xbf, (byte) 0xae, (byte) 0x03, (byte) 0xd6, (byte) 0x32, (byte) 0x09, (byte) 0xda, (byte) 0x48, (byte) 0x6a, (byte) 0x6e, (byte) 0xef, (byte) 0x11, (byte) 0x1c, (byte) 0x3d, (byte) 0x03, (byte) 0x74, (byte) 0x96, (byte) 0xc3, (byte) 0xbc, (byte) 0x43, (byte) 0xbc, (byte) 0xb5, (byte) 0x13, (byte) 0xdd}
	};
	//@formatter:on

	public static void test() {
		for (int i = 0; i < key.length; ++i) {
			test(key[i], data, result[i]);
		}
	}

	public static void test(byte[] key, byte[] msg, byte[] ref) {
		Mac mac = Mac.getInstance(Hash.Algorithm.LSH512_512);
		mac.init(key);
		byte[] hmac = mac.doFinal(msg);
		System.out.printf("HMAC-LSH512-TEST: %s\n", Arrays.equals(hmac, ref));
	}
}
